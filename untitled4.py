# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10jCID24gVFpvOgUJNaYpK4o2u4fYXWuc
"""

import pandas as pd

data = {
    'order_id' : [1,2,3,4],
    'amount': [50,200,150,75], # Added a comma here
    'category': ['a','b','a','c']

}

df= pd.DataFrame(data) # Corrected DataFrame capitalization

filtered_df = df[df['amount']> 100].copy() # Removed duplicate filtering and ensured a copy

filtered_df.loc[:, 'discounted_amount'] = filtered_df['amount'].apply(lambda x: x * 0.9)

total_discounted_revenue = filtered_df['discounted_amount'].sum()

print("filtered dataframe:", filtered_df)
print("total discounted revenue:", total_discounted_revenue)

# Import Libraries
import seaborn as sns
import pandas as pd
import matplotlib.pyplot as plt

# Load dataset
tips = sns.load_dataset('tips')

# 1. Data Overview
print("=== Data Info ===")
print(tips.info())
print("\n=== First 5 Rows ===")
print(tips.head())
print("\n=== Summary Statistics ===")
print(tips.describe())
print("\n=== Checking for missing values ===")
print(tips.isnull().sum())

# Histogram
plt.figure(figsize=(8, 4))
sns.histplot(tips['total_bill'], kde=True)
plt.title('Distribution of total bill')
plt.show()

# Countplot for 'day'
plt.figure(figsize=(6, 4))
sns.countplot(x='day', data=tips)
plt.title("Count of Records by Day")
plt.show()

# Boxplot for 'total_bill' by 'time'
plt.figure(figsize=(6, 4))
sns.boxplot(x='time', y='total_bill', data=tips)
plt.title("Total Bill Distribution by Time")
plt.show()

# Scatterplot for 'total_bill' vs 'tip'
plt.figure(figsize=(6, 4))
sns.scatterplot(x='total_bill', y='tip', data=tips)
plt.title("Total Bill vs Tip")
plt.show()

# Boxplot: tip by smoker status
plt.figure(figsize=(6, 4))
sns.boxplot(x='smoker', y='tip', data=tips)
plt.title("Tip Distribution by Smoker Status")
plt.show()

# Correlation analysis
corr = tips.corr(numeric_only=True)

plt.figure(figsize=(6, 4))
sns.heatmap(corr, annot=True, cmap='coolwarm')
plt.title("Correlation Heatmap")
plt.show()

# Outlier removal (IQR method)
Q1 = tips['total_bill'].quantile(0.25)
Q3 = tips['total_bill'].quantile(0.75)
IQR = Q3 - Q1
lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR
original_size = tips.shape[0]
tips = tips[(tips['total_bill'] >= lower_bound) & (tips['total_bill'] <= upper_bound)]
cleaned_size = tips.shape[0]

print(f"Original dataset size: {original_size}")
print(f"Dataset size after outlier removal: {cleaned_size}")

# Correlation after outlier removal
corr_clean = tips.corr(numeric_only=True)

plt.figure(figsize=(6, 5))
sns.heatmap(corr_clean, annot=True, cmap='coolwarm')
plt.title("Correlation Heatmap after Outlier Removal")
plt.show()

def require_admin (func):
  def wrapper(user, *args, **kwargs):
    if user != "admin":
      print ("Access denied!")
      return
    return func(user, *args, **kwargs)
  return wrapper

@require_admin
def delete_user (user, user_id):
  print(f"User {user_id} deleted by {user}")

delete_user("guest", 101)
delete_user("admin", 101)

def myfunc(max):
  count = 1
  while count <= max:
    yield count
    count += 1


for i in myfunc(5):
  print(i)